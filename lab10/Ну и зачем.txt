import matplotlib.pyplot as plt
import numpy as np

polygon_1 = np.array([np.array([3, 9]), np.array([6, 3]), np.array([12, 3]), np.array([15, 9]), np.array([12, 12]), np.array([6, 12]), np.array([3, 9])])
# Две точки пересечения
# segment = [np.array([4,4]), np.array([10,10])]
segment = [np.array([5,2]), np.array([8,9])]
# segment = [np.array([5,11]), np.array([14,4])]
# segment = [np.array([14,4]), np.array([5,11])]
# Параллельно стороне
# segment = [np.array([3,12]), np.array([14,12])]
# segment = [np.array([3,9]), np.array([14,9])]
# segment = [np.array([4,3]), np.array([14,3])]
# segment = [np.array([12,3]), np.array([15,9])]
# Одна точка пересечения
# segment = [np.array([3,1]), np.array([3,13])]
# Не пересекает
# segment = [np.array([4,13]), np.array([13,13])]
# Отрезок вошёл частично
# segment = [np.array([4,13]), np.array([13,13])]


def line_intersection(line1, line2):
    xdiff = (line1[0][0] - line1[1][0], line2[0][0] - line2[1][0])
    ydiff = (line1[0][1] - line1[1][1], line2[0][1] - line2[1][1])

    def det(a, b):
        return a[0] * b[1] - a[1] * b[0]

    div = det(xdiff, ydiff)
    if div == 0:
       return []

    d = (det(*line1), det(*line2))
    x = det(d, xdiff) / div
    y = det(d, ydiff) / div
    return [x, y]


def is_potentially_entering(segment, polygon_segment):
    polygon_segment_first = polygon_segment[0]
    polygon_segment_second = polygon_segment[1]
    normal = [polygon_segment_second[1] - polygon_segment_first[1],
              -(polygon_segment_second[0] - polygon_segment_first[0])]
    segment_first = segment[0]
    segment_second = segment[1]
    segment_vector = [segment_second[0] - segment_first[0],
                      segment_second[1] - segment_first[1]]
    if np.dot(segment_vector, normal) < 0:
        return True
    else:
        return False #Здесь ещё проверить случай == 0


def is_point_segment(x1, x2, x0):
    x = [x1[0], x2[0]]
    x.sort()
    if x0[0] < x[0] or x0[0] > x[1]:
        return 0
    x1x2 = x2 - x1
    x1x0 = x0 - x1
    vm = np.cross(x1x2, x1x0)
    if vm == 0 or abs(vm) < 0.000001:
        return 1
    return 0


def max(first_point, second_point):
    if len(second_point) == 0:
        return first_point
    if second_point[1] > first_point[1]:
        return second_point
    elif second_point[1] == first_point[1]:
        if second_point[0] >= first_point[0]:
            return second_point
        else:
            return first_point
    else:
        return first_point


def min(first_point, second_point):
    if len(second_point) == 0:
        return first_point
    if second_point[1] > first_point[1]:
        return first_point
    elif second_point[1] == first_point[1]:
        if second_point[0] >= first_point[0]:
            return first_point
        else:
            return second_point
    else:
        return second_point


def check_point_equality(a, b):
    return a[0] == b[0] and a[1] == b[1]


# Если не пересекает - t_0 и t_1 будут пустыми,
# если пересекает в одной точке - t_0 == t_1,
# если в двух точках - t_0 != t_1
t_0 = []
t_1 = []
intersections = []
for i in range(0, len(polygon_1) - 1):
    print([polygon_1[i], polygon_1[i+1]])
    intersection_point = line_intersection([polygon_1[i], polygon_1[i+1]], segment)
    if len(intersection_point) != 0:
        if is_potentially_entering(segment, [polygon_1[i], polygon_1[i+1]]):
            # if is_point_segment(polygon_1[i], polygon_1[i+1], intersection_point):
            #     t_0 = intersection_point
            t_0 = max(intersection_point, t_0)
        else:
            # if is_point_segment(polygon_1[i], polygon_1[i+1], intersection_point):
            #     t_1 = intersection_point
            t_1 = min(intersection_point, t_1)
        intersections.append(intersection_point)
    # print(is_potentially_entering(segment, [polygon_1[i], polygon_1[i+1]]))
print(t_0, t_1)


print(intersections)
# arr_x2 = []
# arr_y2 = []
# for item in intersections:
#     arr_x2.append(item[0])
#     arr_y2.append(item[1])
# plt.scatter(arr_x2, arr_y2)


arr_x = []
arr_y = []
for item in polygon_1:
    arr_x.append(item[0])
    arr_y.append(item[1])
plt.plot(arr_x, arr_y)

arr_x3 = [t_0[0], t_1[0]]
arr_y3 = [t_0[1], t_1[1]]
plt.plot(arr_x3, arr_y3)

plt.show()