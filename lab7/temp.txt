import random

import numpy as np
import matplotlib.pyplot as plt

from Functions import point_and_a_straight_line

fig, ax = plt.subplots()

points = []
hull = []


def dynamic_hull(array):
    for i in range(0, len(array) - 1):
        if array[i][0] == array[-1][0] and array[i][1] == array[-1][1]:
            array.pop()
            return
    if len(array) == 1:
        hull.append(array[0])
    elif len(array) == 2:
        hull.append(array[1])
    elif len(array) == 3:
        if point_and_a_straight_line(array[0], array[1], array[2]) == 0:
            hull.clear()
            for i in range(0, 3):
                if np.dot(array[i - 1] - array[i], array[i - 2] - array[i]) >= 0:
                    hull.append(array[i])
        else:
            if point_and_a_straight_line(array[0], array[1], array[2]) == 1:
                hull.append(array[2])
            else:
                hull[1] = array[2]
                hull.append(array[1])
    else:
        hull.append(hull[0])

        right = []
        for i in range(0, len(hull) - 1):
            if point_and_a_straight_line(hull[i], hull[i+1], array[-1]) == 2:
                right.append([hull[i], hull[i+1]])
        if len(right) == 0:
            hull.pop()
            return
        else:
            if right[-1][0][0] == hull[-2][0] and right[-1][0][1] == hull[-2][1] and right[-1][1][0] == hull[-1][0] and right[-1][1][1] == hull[-1][1]: #4.3
                # del hull[0]
                # hull.insert(0, np.array(array[-1]))
                for i in range(0, len(right) - 1):
                    for j in range(0, len(hull) - 1):
                        if hull[j][0] == right[i][0][0] and hull[j][1] == right[i][0][1]:
                            del hull[j]
                hull.insert(0, np.array(array[-1]))
                if len(right) == 1:
                    hull.pop()
            else: #4.2
                iterLeft = 0
                iterRight = 0
                for i in range(0, len(hull) - 1):
                    if hull[i][0] == right[0][0][0] and hull[i][1] == right[0][0][1]:
                        iterLeft = i
                    if hull[i][0] == right[-1][1][0] and hull[i][1] == right[-1][1][1]:
                        iterRight = i
                print(iterLeft)
                print(iterRight)
                for i in range(iterRight - iterLeft - 1):
                    del hull[iterLeft + 1]
                hull.insert(iterLeft + 1, array[-1])
                hull.pop()




def draw():
    points_x = [p[0] for p in points]
    points_y = [p[1] for p in points]
    l1 = ax.scatter(points_x, points_y, marker='o', linestyle='-', color='blue')
    points_x.clear()
    points_y.clear()
    points_x = [p[0] for p in hull]
    points_y = [p[1] for p in hull]
    points_x.append(hull[0][0])
    points_y.append(hull[0][1])
    ax.plot(points_x, points_y, marker='o', linestyle='-', color='red')
    plt.show()


# for i in range(288):
#     x = random.randint(1, 15)
#     y = random.randint(1, 15)
#     point = np.array([x,y])
#     points.append(point)
#     dynamic_hull(points)
#     draw()


# point = np.array([3,2])
# points.append(point)
# point = np.array([5,3])
# points.append(point)
# point = np.array([1,1])
# points.append(point)
# dynamic_hull(points)
# print(hull)

x = 4
y = 1
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 8
y = 11
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 7
y = 13
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 13
y = 13
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 8
y = 8
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 14
y = 6
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 11
y = 8
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 15
y = 9
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 1
y = 2
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
x = 8
y = 15
point = np.array([x,y])
points.append(point)
dynamic_hull(points)
print(hull)
draw()
